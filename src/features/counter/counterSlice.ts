import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { DIContainer } from '../../DI/DIContainer';
import { User } from '../../types/User';
import { fetchCount } from './counterAPI';

export const COUNTER_FEATURE_KEY = 'counter';

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed' | 'reloading';
  user?: User;
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
  user: undefined
};
////////////////////////////////////////////////////////////////////////////////////
// Reload Thunk
export const reloadRequest = createAsyncThunk(
  'counter/reloadRequest',
  async (): Promise<any> => {
    return new Promise((resolve , reject) => {

      // Getting a service from the container.  
      // [optional] DIContainer.resolve<UserService>('userService');      
      const userService = DIContainer.cradle.userService;

      
      userService.getUser('1337')
      .then(user => {
        resolve(user);
      });
 

    });

  }
);



// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: COUNTER_FEATURE_KEY,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reset: (state,  action: PayloadAction<Partial<CounterState | undefined>>) => {

      
      if (action.payload) {        
        const newstate = {
          ...initialState,
          ...action.payload
        };
        return newstate;
      }           

      return initialState;
    },
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {

    builder
    .addCase(reloadRequest.pending, (state) => {
      state.status = 'reloading';
    })
    .addCase(reloadRequest.fulfilled, (state, {payload}) => { 
      state.status = 'idle'; 

      state.user = {...payload};
      state.value += 1;

    })
    .addCase(reloadRequest.rejected, (state) => {
      state.status = 'failed';

    });



    // ----
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });



  },
});

export const {reset, increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export const counterSliceReducer = counterSlice.reducer;
